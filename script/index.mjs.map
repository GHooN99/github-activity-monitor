{"version":3,"sources":["../src/modules/activity-fetching/github-activity-aggregator.ts","../src/modules/persistence/node-file-system.ts","../src/modules/state-management/json-state-manager.ts","../src/core/activity-monitor.ts","../src/modules/summarization/noop-summarizer.ts","../src/modules/activity-fetching/github-discussion-fetcher.ts","../src/composition-root.ts","../src/configs/config-loader.ts","../src/models/constant.ts","../monitor.config.ts","../src/index.ts"],"sourcesContent":["import { ActivityItem, ActivitySourceType } from \"../../models/activity\";\nimport { RepoConfig } from \"../../models/config\";\nimport { LastProcessedState, RepositoryLastProcessed } from \"../../models/state\";\nimport { IActivityFetcher, ISingleSourceActivityFetcher } from \"./activity-fetcher\";\n\n/**\n * A map of single source activity fetchers.\n * This is used to inject the dependencies into the GithubActivityAggregator constructor.\n */\ninterface SingleSourceActivityFetchers {\n  [key: string]: ISingleSourceActivityFetcher | undefined;\n}\n\nexport class GithubActivityAggregator implements IActivityFetcher {\n  private readonly fetchers = new Map<ActivitySourceType, ISingleSourceActivityFetcher>();\n\n  public constructor(\n    private readonly dependencies: SingleSourceActivityFetchers,\n    private readonly repoConfigs: RepoConfig[]\n  ) {\n    const registerFetcher = (fetcher: ISingleSourceActivityFetcher | undefined) => {\n      if (fetcher) {\n        const types = (\n          Array.isArray(fetcher.getSourceType())\n            ? fetcher.getSourceType()\n            : [fetcher.getSourceType()]\n        ) as ActivitySourceType[];\n\n        types.forEach((type) => this.fetchers.set(type, fetcher));\n        console.log(`Registered fetcher for type(s): ${types.join(\", \")}`);\n      }\n    };\n\n    Object.values(this.dependencies).forEach(registerFetcher);\n\n    if (this.fetchers.size === 0) {\n      console.warn(\"GithubActivityAggregator initialized without any registered fetchers!\");\n    }\n    console.log(\n      `GithubActivityAggregator initialized for ${this.repoConfigs.length} repo configurations.`\n    );\n  }\n\n  public async fetchNewActivities(\n    currentProcessedState: LastProcessedState\n  ): Promise<ActivityItem[]> {\n    let allNewActivities: ActivityItem[] = [];\n    const fetchPromises: Promise<ActivityItem[]>[] = [];\n\n    console.log(\"Starting aggregated activity fetch...\");\n\n    for (const repoConfig of this.repoConfigs) {\n      const repoFullName = repoConfig.name;\n      const repoLastProcessed: RepositoryLastProcessed = currentProcessedState[repoFullName] || {};\n\n      for (const typeToMonitor of repoConfig.monitorTypes) {\n        const fetcher = this.fetchers.get(typeToMonitor);\n        console.log(`Fetching ${typeToMonitor} for ${repoFullName}`);\n        if (fetcher) {\n          const fetchPromise = (async () => {\n            try {\n              return await fetcher.fetchNewActivities(repoFullName, repoLastProcessed);\n            } catch (error) {\n              console.error(\n                `Fetcher for ${typeToMonitor} failed unexpectedly for ${repoFullName}:`,\n                error\n              );\n              return [];\n            }\n          })();\n          fetchPromises.push(fetchPromise);\n        } else {\n          console.warn(\n            `No registered fetcher found for type \"${typeToMonitor}\" required by ${repoFullName}`\n          );\n        }\n      }\n    }\n\n    const results = await Promise.all(fetchPromises);\n    allNewActivities = results.flat();\n\n    allNewActivities.sort(\n      (a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n    );\n\n    console.log(`Aggregated fetch complete. Found ${allNewActivities.length} new activities.`);\n    return allNewActivities;\n  }\n}\n","import fs, { type WriteFileOptions } from \"fs\";\nimport { IFileSystem } from \"./file-system\";\n\nexport class NodeFileSystem implements IFileSystem {\n  public existsSync(path: string | Buffer | URL): boolean {\n    return fs.existsSync(path);\n  }\n\n  public readFileSync(\n    path: string | Buffer | URL,\n    options?: { encoding?: BufferEncoding | null; flag?: string } | BufferEncoding | null\n  ): string | Buffer {\n    const readOptions = typeof options === \"string\" ? { encoding: options } : options;\n    const finalOptions = readOptions ?? { encoding: \"utf-8\" };\n    if (finalOptions && !finalOptions.encoding) {\n      finalOptions.encoding = \"utf-8\";\n    }\n    return fs.readFileSync(path, finalOptions);\n  }\n\n  public writeFileSync(\n    path: string | Buffer | URL,\n    data: string | NodeJS.ArrayBufferView,\n    options?: WriteFileOptions\n  ): void {\n    const writeOptions = typeof options === \"object\" ? options : { encoding: options ?? \"utf-8\" };\n    if (typeof data === \"string\" && (!writeOptions || !writeOptions.encoding)) {\n      if (!writeOptions) {\n        fs.writeFileSync(path, data, { encoding: \"utf-8\" });\n      } else {\n        writeOptions.encoding = \"utf-8\";\n        fs.writeFileSync(path, data, writeOptions);\n      }\n    } else {\n      fs.writeFileSync(path, data, writeOptions);\n    }\n  }\n}\n","import { ActivityItem } from \"../../models/activity\";\nimport { LastProcessedState } from \"../../models/state\";\nimport { IFileSystem } from \"../persistence/file-system\";\nimport { IStateManager } from \"./state-manager\";\n\nexport class JsonStateManager implements IStateManager {\n  private readonly defaultState: LastProcessedState = {};\n\n  public constructor(\n    private readonly filePath: string,\n    private readonly fileSystem: IFileSystem\n  ) {\n    console.log(`JsonStateManager initialized with path: ${this.filePath}`);\n  }\n\n  public loadState(): LastProcessedState {\n    try {\n      if (this.fileSystem.existsSync(this.filePath)) {\n        const data = this.fileSystem.readFileSync(this.filePath, { encoding: \"utf-8\" });\n\n        if (typeof data === \"string\") {\n          return JSON.parse(data) as LastProcessedState;\n        } else {\n          console.error(\"Error loading state file: Read data is not a string.\");\n        }\n      }\n      console.log(\"State file not found, starting with empty state.\");\n    } catch (error) {\n      console.error(\"Error loading state file, starting with empty state:\", error);\n    }\n\n    return JSON.parse(JSON.stringify(this.defaultState));\n  }\n\n  public saveState(processedState: LastProcessedState): void {\n    try {\n      const dataToSave = JSON.stringify(processedState, null, 2);\n      this.fileSystem.writeFileSync(this.filePath, dataToSave, { encoding: \"utf-8\" });\n\n      console.log(`State saved successfully to ${this.filePath}.`);\n    } catch (error) {\n      console.error(`Error saving state file to ${this.filePath}:`, error);\n    }\n  }\n\n  public calculateNextState(\n    currentProcessedState: LastProcessedState,\n    fetchedActivities: ActivityItem[]\n  ): LastProcessedState {\n    const nextProcessedState: LastProcessedState = JSON.parse(\n      JSON.stringify(currentProcessedState)\n    );\n\n    for (const activity of fetchedActivities) {\n      const repo = activity.repo;\n      const sourceType = activity.sourceType;\n\n      if (!nextProcessedState[repo]) {\n        nextProcessedState[repo] = {};\n      }\n\n      const currentRepoProcessed = nextProcessedState[repo];\n\n      if (!currentRepoProcessed[sourceType]) {\n        currentRepoProcessed[sourceType] = { lastTimestamp: new Date(0).toISOString() };\n      }\n\n      const currentSourceProcessed = currentRepoProcessed[sourceType];\n      const activityDate = new Date(activity.createdAt);\n\n      if (activityDate > new Date(currentSourceProcessed.lastTimestamp)) {\n        currentSourceProcessed.lastTimestamp = activity.createdAt;\n      }\n    }\n\n    return nextProcessedState;\n  }\n}\n","import { AppConfig } from \"../configs/app-config\";\nimport { ActivityItem } from \"../models/activity\";\nimport { LastProcessedState } from \"../models/state\";\nimport { IActivityFetcher } from \"../modules/activity-fetching/activity-fetcher\";\nimport { INotifier } from \"../modules/notification/notifier\";\nimport { IStateManager } from \"../modules/state-management/state-manager\";\nimport { IActivitySummarizer } from \"../modules/summarization/summarizer\";\n\ninterface ActivityMonitorDependencies {\n  fetcher: IActivityFetcher;\n  stateManager: IStateManager;\n  summarizer: IActivitySummarizer;\n  notifier: INotifier;\n  config: AppConfig;\n}\n\nexport class ActivityMonitor {\n  constructor(private readonly dependencies: ActivityMonitorDependencies) {}\n\n  public async run(): Promise<void> {\n    console.log(\"ActivityMonitor run starting...\");\n    try {\n      const currentState = this.loadCurrentState();\n      const fetchedActivities = await this.fetchNewActivities(currentState);\n\n      if (fetchedActivities.length === 0) {\n        console.log(\"No new activities found. Monitoring run finished.\");\n        return;\n      }\n\n      console.log(`Found ${fetchedActivities.length} new activities.`);\n\n      const itemsToSend = await this.prepareItemsForNotification(fetchedActivities);\n      await this.sendNotifications(itemsToSend, fetchedActivities.length);\n\n      this.updateState(currentState, fetchedActivities);\n\n      console.log(\"ActivityMonitor run finished successfully.\");\n    } catch (error) {\n      console.error(\"Error during ActivityMonitor run:\", error);\n    }\n  }\n\n  private loadCurrentState(): LastProcessedState {\n    return this.dependencies.stateManager.loadState();\n  }\n\n  private async fetchNewActivities(currentState: LastProcessedState): Promise<ActivityItem[]> {\n    return this.dependencies.fetcher.fetchNewActivities(currentState);\n  }\n\n  private async prepareItemsForNotification(\n    fetchedActivities: ActivityItem[]\n  ): Promise<ActivityItem[]> {\n    const itemsToProcess = fetchedActivities.slice(-this.dependencies.config.maxItemsPerRun);\n\n    if (this.dependencies.config.summarizationEnabled) {\n      const summarizedItems =\n        await this.dependencies.summarizer.summarizeActivities(itemsToProcess);\n      return summarizedItems;\n    }\n\n    return itemsToProcess;\n  }\n\n  private async sendNotifications(\n    itemsToSend: ActivityItem[],\n    totalFetchedCount: number\n  ): Promise<void> {\n    await this.dependencies.notifier.sendNotification(\n      itemsToSend,\n      totalFetchedCount,\n      this.dependencies.config.maxItemsPerRun\n    );\n  }\n\n  private updateState(currentState: LastProcessedState, fetchedActivities: ActivityItem[]): void {\n    const nextState = this.dependencies.stateManager.calculateNextState(\n      currentState,\n      fetchedActivities\n    );\n\n    this.dependencies.stateManager.saveState(nextState);\n  }\n}\n","// src/adapters/llm/noop-summarizer.ts\n\nimport { ActivityItem } from \"../../models/activity\";\nimport { IActivitySummarizer } from \"./summarizer\";\n\nexport class NoopSummarizer implements IActivitySummarizer {\n  public async summarizeActivities(activities: ActivityItem[]): Promise<ActivityItem[]> {\n    console.log(\"Skipping summarization (NoopSummarizer).\");\n    return activities;\n  }\n}\n","import { graphql, GraphqlResponseError } from \"@octokit/graphql\";\nimport { ActivityItem, ActivitySourceType } from \"../../models/activity\";\nimport { RepositoryLastProcessed } from \"../../models/state\";\nimport { ISingleSourceActivityFetcher } from \"./activity-fetcher\";\nimport { GitHubQueryResult } from \"./fetch-response\";\nimport { AppConfig } from \"../../configs/app-config\";\n\nconst DISCUSSION_QUERY = `\n    query GetDiscussionsAndComments($owner: String!, $name: String!, $discCount: Int!, $commCount: Int!) {\n      repository(owner: $owner, name: $name) {\n        discussions(first: $discCount, orderBy: {field: CREATED_AT, direction: DESC}) {\n          nodes {\n            id title url createdAt author { login } bodyText\n            comments(last: $commCount, orderBy: {field: UPDATED_AT, direction: DESC}) {\n               nodes { id createdAt author { login } bodyText url discussion { title url } }\n            }\n          }\n        }\n      }\n    }\n`;\n\nexport class GithubDiscussionFetcher implements ISingleSourceActivityFetcher {\n  private readonly graphqlWithAuth: typeof graphql;\n\n  public constructor(private readonly config: AppConfig) {\n    this.graphqlWithAuth = graphql.defaults({\n      headers: { authorization: `token ${config.githubPat}` },\n    });\n    console.log(\"GithubDiscussionFetcher initialized.\");\n  }\n\n  public getSourceType(): ActivitySourceType[] {\n    return [\"discussion\", \"discussion_comment\"];\n  }\n\n  private processDiscussionData(\n    repoFullName: string,\n    repositoryData: GitHubQueryResult[\"repository\"],\n    lastDiscussionTimestamp: string,\n    lastCommentTimestamp: string\n  ): ActivityItem[] {\n    const activities: ActivityItem[] = [];\n    if (!repositoryData?.discussions?.nodes) return activities;\n\n    for (const discussion of repositoryData.discussions.nodes) {\n      if (new Date(discussion.createdAt) > new Date(lastDiscussionTimestamp)) {\n        activities.push({\n          repo: repoFullName,\n          sourceType: \"discussion\",\n          id: discussion.id,\n          title: discussion.title || \"Untitled Discussion\",\n          url: discussion.url,\n          author: discussion.author?.login || \"Unknown\",\n          createdAt: discussion.createdAt,\n          body: discussion.bodyText || \"\",\n        });\n      }\n\n      if (discussion.comments?.nodes) {\n        for (const comment of discussion.comments.nodes) {\n          if (new Date(comment.createdAt) > new Date(lastCommentTimestamp)) {\n            activities.push({\n              repo: repoFullName,\n              sourceType: \"discussion_comment\",\n              id: comment.id,\n              title: `Re: ${comment.discussion?.title || discussion.title || \"Original Discussion\"}`,\n              url: comment.url,\n              author: comment.author?.login || \"Unknown\",\n              createdAt: comment.createdAt,\n              body: comment.bodyText || \"\",\n            });\n          }\n        }\n      }\n    }\n    return activities;\n  }\n\n  public async fetchNewActivities(\n    repoFullName: string,\n    repoLastProcessed: RepositoryLastProcessed\n  ): Promise<ActivityItem[]> {\n    const [owner, name] = repoFullName.split(\"/\");\n    if (!owner || !name) return [];\n\n    const lastDiscussionTimestamp =\n      repoLastProcessed.discussion?.lastTimestamp || new Date(0).toISOString();\n    const lastCommentTimestamp =\n      repoLastProcessed.comment?.lastTimestamp || new Date(0).toISOString();\n\n    console.log(\n      `Fetching Discussions/Comments for ${repoFullName} since D:${lastDiscussionTimestamp}, C:${lastCommentTimestamp}`\n    );\n\n    try {\n      const result = await this.graphqlWithAuth<GitHubQueryResult>(DISCUSSION_QUERY, {\n        owner,\n        name,\n        discCount: this.config.maxItemsPerRun,\n        commCount: this.config.maxItemsPerRun,\n      });\n\n      return this.processDiscussionData(\n        repoFullName,\n        result.repository,\n        lastDiscussionTimestamp,\n        lastCommentTimestamp\n      );\n    } catch (error: unknown) {\n      if (error instanceof GraphqlResponseError) {\n        if (error.message.includes(\"rate limit exceeded\"))\n          console.warn(`Rate limit exceeded for ${repoFullName} discussions.`);\n        else if (error.errors?.some((e) => e.type === \"NOT_FOUND\"))\n          console.warn(\n            `Repo/Discussions not found or insufficient permissions for ${repoFullName}.`\n          );\n        else\n          console.error(\n            `GraphQL error fetching discussions for ${repoFullName}:`,\n            JSON.stringify(error.errors, null, 2)\n          );\n      } else if (error instanceof Error)\n        console.error(`Network error fetching discussions for ${repoFullName}:`, error.message);\n      else console.error(`Unknown error fetching discussions for ${repoFullName}:`, error);\n      return [];\n    }\n  }\n}\n","import { GithubActivityAggregator } from \"./modules/activity-fetching/github-activity-aggregator\";\nimport { NodeFileSystem } from \"./modules/persistence/node-file-system\";\nimport { JsonStateManager } from \"./modules/state-management/json-state-manager\";\nimport { AppConfig } from \"./configs/app-config\";\nimport { ActivityMonitor } from \"./core/activity-monitor\";\nimport { NoopSummarizer } from \"./modules/summarization/noop-summarizer\";\nimport { GithubDiscussionFetcher } from \"./modules/activity-fetching/github-discussion-fetcher\";\n\nfunction createActivityFetcher(config: AppConfig): GithubActivityAggregator {\n  const discussionFetcher = new GithubDiscussionFetcher(config);\n  return new GithubActivityAggregator(\n    {\n      discussionFetcher,\n    },\n    config.repoConfigs\n  );\n}\n\nexport function setupApplication(config: AppConfig): ActivityMonitor {\n  const fileSystem = new NodeFileSystem();\n  const stateManager = new JsonStateManager(config.stateFilePath, fileSystem);\n  const summarizer = new NoopSummarizer();\n\n  const fetcher = createActivityFetcher(config);\n\n  return new ActivityMonitor({\n    config,\n    fetcher,\n    stateManager,\n    summarizer,\n    notifier: {\n      sendNotification: async () => {\n        console.log(\"Notification sent\");\n      },\n    },\n  });\n}\n","import dotenv from \"dotenv\";\nimport { LLMProviderType } from \"../models/config\";\nimport {\n  DEFAULT_LLM_MODEL_NAME,\n  DEFAULT_LLM_PROVIDER,\n  DEFAULT_MAX_ITEMS_PER_RUN,\n  DEFAULT_STATE_FILE_PATH,\n  DEFAULT_SUMMARIZATION_ENABLED,\n  LLM_PROVIDERS,\n} from \"../models/constant\";\nimport { config as MonitorConfig } from \"../../monitor.config\";\nimport { AppConfig, AppSecrets, AppVariables } from \"./app-config\";\n\ntype LLMProviderValidation = {\n  [key in LLMProviderType]?: {\n    isValid: (config: AppConfig) => boolean;\n    errorMessage: string;\n  };\n};\n\ndotenv.config(); // Load .env for local development\n\nexport function loadAndValidateConfig(): AppConfig {\n  console.log(\"Loading and validating application configuration...\");\n\n  const secrets = getSecretsFromEnv();\n  const variables = getVariablesFromMonitorConfig();\n\n  const appConfig = { ...secrets, ...variables };\n\n  validateAppConfig(appConfig);\n\n  logAppConfig(appConfig);\n\n  console.log(\"Configuration loading process complete.\");\n\n  return appConfig;\n}\n\nfunction getSecretsFromEnv(): AppSecrets {\n  console.log(\"Assembling configuration from environment variables...\");\n  return {\n    githubPat: process.env.GITHUB_PAT || \"\",\n    openaiApiKey: process.env.OPENAI_API_KEY,\n    geminiApiKey: process.env.GOOGLE_API_KEY,\n    claudeApiKey: process.env.CLAUDE_API_KEY,\n    discordWebhookUrl: process.env.DISCORD_WEBHOOK_URL,\n    slackWebhookUrl: process.env.SLACK_WEBHOOK_URL,\n  };\n}\n\nfunction getVariablesFromMonitorConfig(): AppVariables {\n  return {\n    repoConfigs: MonitorConfig.repoConfigs ?? [],\n    stateFilePath: MonitorConfig.stateFilePath ?? DEFAULT_STATE_FILE_PATH,\n    maxItemsPerRun: MonitorConfig.maxItemsPerRun ?? DEFAULT_MAX_ITEMS_PER_RUN,\n    summarizationEnabled: MonitorConfig.summarizationEnabled ?? DEFAULT_SUMMARIZATION_ENABLED,\n    llmProvider: MonitorConfig.llmProvider ?? DEFAULT_LLM_PROVIDER,\n    llmModelName: MonitorConfig.llmModelName ?? DEFAULT_LLM_MODEL_NAME,\n  };\n}\n\nfunction validateAppConfig(config: AppConfig): void {\n  console.log(\"Validating configuration...\");\n\n  if (config.githubPat === \"\") throw new Error(\"Missing required config: GITHUB_PAT (Secret)\");\n\n  if (config.repoConfigs.length === 0)\n    throw new Error(\"Missing or invalid required config: RepoConfigs\");\n\n  if (config.repoConfigs.some((rc) => rc.name === \"\"))\n    throw new Error(\"Missing or invalid required config: RepoConfigs.name\");\n\n  if (config.repoConfigs.some((rc) => rc.monitorTypes.length === 0))\n    throw new Error(\"Missing or invalid required config: RepoConfigs.monitorTypes\");\n\n  if (!config.discordWebhookUrl && !config.slackWebhookUrl) {\n    console.warn(\n      \"Warning: No notifier webhook URL configured (DISCORD_WEBHOOK_URL or SLACK_WEBHOOK_URL). Notifications may fail.\"\n    );\n    throw new Error(\"At least one notifier webhook URL is required.\");\n  }\n\n  const llmProviderValidation: LLMProviderValidation = {\n    [LLM_PROVIDERS.OPENAI]: {\n      isValid: (cfg) => !!cfg.openaiApiKey,\n      errorMessage: \"OpenAI summarization requires OPENAI_API_KEY (Secret)\",\n    },\n    [LLM_PROVIDERS.GEMINI]: {\n      isValid: (cfg) => !!cfg.geminiApiKey,\n      errorMessage: \"Gemini summarization requires GOOGLE_API_KEY (Secret)\",\n    },\n    [LLM_PROVIDERS.CLAUDE]: {\n      isValid: (cfg) => !!cfg.claudeApiKey,\n      errorMessage: \"Claude summarization requires CLAUDE_API_KEY (Secret)\",\n    },\n  };\n\n  if (config.summarizationEnabled) {\n    if (config.llmProvider === LLM_PROVIDERS.NONE) {\n      console.warn(\n        `Summarization is enabled but LLM_PROVIDER is '${LLM_PROVIDERS.NONE}'. Disabling summarization.`\n      );\n      config.summarizationEnabled = false;\n    } else {\n      if (!config.llmModelName) {\n        console.warn(\n          `LLM model name could not be determined for provider: ${config.llmProvider}. Using default or summarization might fail.`\n        );\n      }\n\n      const validator = llmProviderValidation[config.llmProvider];\n      if (validator && !validator.isValid(config)) {\n        throw new Error(validator.errorMessage);\n      }\n    }\n  }\n}\n\nfunction logAppConfig(config: AppConfig): void {\n  // repo - [monitor type]\n  console.log(\n    `--- Monitoring Repos --- \\n${config.repoConfigs\n      .map((rc) => `repo: ${rc.name} - types: ${rc.monitorTypes.join(\", \")}`)\n      .join(\"\\n\")}`\n  );\n\n  console.log(`State File Path: ${config.stateFilePath}`);\n\n  if (config.summarizationEnabled) {\n    console.log(\n      `Summarization Enabled: ${config.summarizationEnabled}, Provider: ${config.llmProvider} - ${config.llmModelName}`\n    );\n  }\n}\n","import { LLMProviderType, NotifierProviderType } from \"./config\";\n\nexport const LLM_PROVIDERS = {\n  OPENAI: \"openai\",\n  GEMINI: \"gemini\",\n  CLAUDE: \"claude\",\n  NONE: \"none\",\n} as const satisfies Record<string, LLMProviderType>;\n\nexport const LLM_DEFAULT_MODELS = {\n  [LLM_PROVIDERS.OPENAI]: \"gpt-4o-mini\",\n  [LLM_PROVIDERS.GEMINI]: \"gemini-1.5-flash-latest\",\n  [LLM_PROVIDERS.CLAUDE]: \"claude-3-5-sonnet-20240620\",\n  [LLM_PROVIDERS.NONE]: \"\",\n} as const satisfies Record<LLMProviderType, string>;\n\nexport const NOTIFIER_PROVIDERS = {\n  DISCORD: \"discord\",\n  SLACK: \"slack\",\n} as const satisfies Record<string, NotifierProviderType>;\n\nexport const DEFAULT_STATE_FILE_PATH = \"state.json\";\nexport const DEFAULT_MAX_ITEMS_PER_RUN = 5;\nexport const DEFAULT_SUMMARIZATION_ENABLED = false;\nexport const DEFAULT_LLM_PROVIDER = LLM_PROVIDERS.NONE;\nexport const DEFAULT_LLM_MODEL_NAME = \"\";\n","import type { AppVariables } from \"./src/configs/app-config\";\n\n/**\n * Configuration for the GitHub Activity Monitor.\n */\nexport const config: AppVariables = {\n  /**\n   * Repositories to monitor and the types of activities to track.\n   * - `name`: The full repository name (e.g., \"owner/repo\").\n   * - `monitorTypes`: An array of activity types to monitor for this repository.\n   *   Supported types: \"issue\", \"issue_comment\", \"pull_request\", \"pull_request_review_comment\", \"discussion\", \"discussion_comment\".\n   * @example\n   * {\n   *   name: \"vercel/next.js\",\n   *   monitorTypes: [\"discussion\", \"discussion_comment\", \"issue\"],\n   * }\n   */\n  repoConfigs: [\n    {\n      name: \"vercel/next.js\",\n      monitorTypes: [\"discussion\", \"discussion_comment\"],\n    },\n    {\n      name: \"facebook/react\",\n      monitorTypes: [\"discussion\", \"discussion_comment\"],\n    },\n  ],\n\n  /**\n   * Path to the file where the monitoring state (e.g., last checked timestamp) will be stored.\n   * @default \"state.json\"\n   */\n  stateFilePath: \"state.json\",\n\n  /**\n   * Maximum number of new items (discussions, issues, etc.) to process in a single run per repository.\n   * Helps to avoid hitting API rate limits and manage processing load.\n   * @default 5\n   */\n  maxItemsPerRun: 5,\n\n  /**\n   * Whether to enable AI-powered summarization for fetched activities.\n   * If set to `true`, requires configuring `llmProvider` and `llmModelName`.\n   * @default false\n   */\n  summarizationEnabled: false,\n\n  /**\n   * The Large Language Model (LLM) provider to use for summarization.\n   * Required if `summarizationEnabled` is `true`.\n   * Supported providers: \"gemini\", \"openai\" // (Add other supported providers as needed)\n   * @default \"none\"\n   */\n  llmProvider: \"none\", // Or \"openai\", etc.\n\n  /**\n   * The specific model name from the selected LLM provider to use for summarization.\n   * Required if `summarizationEnabled` is `true`.\n   * @example \"gemini-1.5-flash-latest\", \"gpt-4o\"\n   * @default \"\"\n   */\n  llmModelName: \"\", // Or the specific model you intend to use\n};\n","import { setupApplication } from \"./composition-root\";\nimport { loadAndValidateConfig } from \"./configs/config-loader\";\n\nasync function bootstrap() {\n  console.log(\"Bootstrapping application...\");\n\n  try {\n    const config = loadAndValidateConfig();\n    const monitor = setupApplication(config);\n\n    // 3. 애플리케이션 실행\n    await monitor.run();\n\n    console.log(\"Application run finished successfully.\");\n  } catch (error) {\n    console.error(\"Application failed during setup or run:\", error);\n    process.exit(1);\n  }\n}\n\nconsole.log(\"Starting application...\");\nbootstrap();\n"],"mappings":"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","names":["config","config","config","config"]}